// max7219 interface for led matrix and seven segment displays

.program max7219

.side_set 1 opt

pull         					; Load a 32-bit word from the TX FIFO into the OSR, or stall
set x, 31      					; Preload bit counter

bitloop:                   		; This loop will run 32 times
out pins, 1 side 0        		; Shift 1 bit from OSR to the first pin: "PIN_DATA"
	jmp x-- bitloop side 1
set pins, 1						; set enable pin high
set pins, 0						; set enable pin low


% c-sdk {
#include "hardware/clocks.h"

static void max7219_send(uint32_t data, struct pio_inst inst);

static inline struct pio_inst max7219_init(uint8_t data_pin, uint8_t clock_pin, uint8_t enable_pin) {
	
	struct pio_inst instance;

    // look for unused state machine in both PIO cores
	PIO pio = pio0;
    uint sm = pio_claim_unused_sm(pio0, false);
    if (sm == -1) {
		uint sm = pio_claim_unused_sm(pio1, true);
		PIO pio = pio1;
    }

    instance.sm = sm;
    instance.pio = pio;

	// define clk speed
	uint32_t SHIFT_CLK  = 100 * 1000;	// 100 kHz
	
	uint8_t PIN_DATA  = data_pin;
	uint8_t PIN_CLK   = clock_pin;
	uint8_t PIN_ENA   = enable_pin;

	const uint pin_base = PIN_DATA;

	// init pins for use with PIO
	pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);
	pio_sm_set_consecutive_pindirs(pio, sm, clock_pin, 1, true);
	pio_sm_set_consecutive_pindirs(pio, sm, enable_pin, 1, true);
	pio_gpio_init(pio, data_pin);
	pio_gpio_init(pio, clock_pin);
	pio_gpio_init(pio, enable_pin);

	// copy programm
	uint max7219_offset = pio_add_program(pio, &max7219_program);	
	pio_sm_config conf2 = max7219_program_get_default_config(max7219_offset);

	// set fifos
	// OUT shifts to left, no autopull
	sm_config_set_out_shift(&conf2, false, false, 32);
	sm_config_set_fifo_join(&conf2, PIO_FIFO_JOIN_TX);

	// config pins
	sm_config_set_set_pins(&conf2, enable_pin, 1);
	sm_config_set_out_pins(&conf2, data_pin, 1);
	sm_config_set_sideset_pins(&conf2, clock_pin);	   // pins to use in SIDE instr

	// set clock divider
	float div = (float)clock_get_hz(clk_sys) / (SHIFT_CLK * 2);
	sm_config_set_clkdiv(&conf2, div);

	// init sm
	pio_sm_init(pio, sm, max7219_offset, &conf2);

	// clear fifo and enable
	pio_sm_clear_fifos(pio, sm);
	pio_sm_set_enabled(pio, sm, true);
	
	// init sequence for max7219 chip
	max7219_send(0x00000000,instance);
	
	max7219_send(0x01000100,instance);
	max7219_send(0x02000200,instance);
	max7219_send(0x03000300,instance);
	max7219_send(0x04000400,instance);
	max7219_send(0x05000500,instance);
	max7219_send(0x06000600,instance);
	max7219_send(0x07000700,instance);
	max7219_send(0x08000800,instance);
	
	
	max7219_send(0x09000900,instance);
	max7219_send(0x0A010A01,instance);
	max7219_send(0x0B070B07,instance);
	max7219_send(0x0C010C01,instance);
	max7219_send(0x0F000F00,instance);
	
	return instance;
}

// send to two displays as 0xR1R1D1D1R0R0D0D0
static void max7219_send(uint32_t data, struct pio_inst inst) {
	while (pio_sm_is_tx_fifo_full(inst.pio,inst.sm)) {
		;
	}
	pio_sm_put_blocking(inst.pio,inst.sm, data);
}

// send instuction to two displays
static void max7219_send_instr(uint8_t reg1, uint8_t data1, uint8_t reg0, uint8_t data0, struct pio_inst inst) {
	uint32_t data =  (((uint32_t) reg1) << 24) | (((uint32_t) data1) << 16) | (((uint32_t) reg0) << 8) | ((uint32_t) data0);
	max7219_send(data, inst);
}

//print a ascii cahr to the first display
static void max7219_send_dot_char(uint8_t ascii, struct pio_inst inst) {
	for (uint8_t i = 0 ; i < 5; i++) {
		max7219_send_instr(i+1,max7219_dot_caractrs[ascii][i],0,0,inst);
	}
}

// scroll at two displays thow all avaible chars
static void max7219_scroll_all_char(struct pio_inst inst) {
	for (int i = 0; i < 96*6; i++)	{
		for (int j = 0; j < 8; j++) {
			if ((i+j)%6 == 5 || i+j >= 96*6) {
				max7219_send_instr(0,0,j+1,max7219_dot_caractrs[0][0],inst);
			} else {
				max7219_send_instr(0,0,j+1,max7219_dot_caractrs[(i+j)/6][(i+j)%6],inst);
			}
		}
		for (int j = 8; j < 16; j++) {
			if ((i+j)%6 == 5 || i+j >= 96*6) {
				max7219_send_instr(j-7,max7219_dot_caractrs[0][0],0,0,inst);
			} else {
			max7219_send_instr(j-7,max7219_dot_caractrs[(i+j)/6][(i+j)%6],0,0,inst);
			}
		}
		sleep_ms(25);
	}
}

// scroll a arbitrary string across the displays
static void max7219_scroll_string(char *msg, uint8_t speed, struct pio_inst inst) {
		
		// measure lenght
		uint8_t lenght = 1;
		for (; msg[lenght] != '\0'; lenght++){
			;
		}

		// generate pixel data from string
		uint8_t text[lenght][5];
		for (uint8_t i = 0; i < lenght; i++){
			for (uint8_t j = 0; j<5; j++) {
				text[i][j] = max7219_dot_caractrs[msg[i]-0x20][j];
			}
		}
		
		// send to display
		for (int i = 0; i < lenght*6; i++)	{
			for (int j = 0; j < 8; j++) {
				if ((i+j)%6 == 5 || (i+j)/6 >= lenght) {
					max7219_send_instr(0,0,j+1,0x00,inst);
				} else {
					max7219_send_instr(0,0,j+1,text[(i+j)/6][(i+j)%6],inst);
				}
			}
			for (int j = 8; j < 16; j++) {
				if ((i+j)%6 == 5 || (i+j)/6 >= lenght) {
					max7219_send_instr(j-7,0x00,0,0,inst);
				} else {
				max7219_send_instr(j-7,text[(i+j)/6][(i+j)%6],0,0,inst);
				}
			}
			sleep_ms(speed);
		}
		

}

// set all pixels to some value
static void max7219_disply_array_on_2x8x8(uint8_t *msg, struct pio_inst inst) {
	for( int i = 0; i<8; i++) {
		max7219_send_instr(i+1,msg[i],i+1,msg[i+8],inst);
	}
}

// clear display
static void max7219_disply_clear(struct pio_inst inst) {
	for( int i = 0; i<8; i++) {
		max7219_send_instr(i+1,0,i+1,0,inst);
	}
}


%}
